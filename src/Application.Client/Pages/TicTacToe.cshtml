@using Application.Shared
@page "/blazor/tic-tac-toe"
@inject HttpClient Http

<div class="row" id="gameboard">
    @if (currentGameState < 9 && winner == null)
    {
        <h3>Player with mark @currentPlayer has to make his/her move.</h3>
    }
    else if (currentGameState == 9 || winner != null)
    {
        <h3>The game has finished! @((winner != null) ? "Winner is sign " + winner : "")</h3>
    }
    <div>
        <table>
            <tr>
                <td><button class="@GetWinningClass(1, 1)" onclick="@(async () => await ClickCell(1, 1))">@cells[0]</button></td>
                <td><button class="@GetWinningClass(1, 2)" onclick="@(async () => await ClickCell(1, 2))">@cells[1]</button></td>
                <td><button class="@GetWinningClass(1, 3)" onclick="@(async () => await ClickCell(1, 3))">@cells[2]</button></td>
            </tr>
            <tr>
                <td><button class="@GetWinningClass(2, 1)" onclick="@(async () => await ClickCell(2, 1))">@cells[3]</button></td>
                <td><button class="@GetWinningClass(2, 2)" onclick="@(async () => await ClickCell(2, 2))">@cells[4]</button></td>
                <td><button class="@GetWinningClass(2, 3)" onclick="@(async () => await ClickCell(2, 3))">@cells[5]</button></td>
            </tr>
            <tr>
                <td><button class="@GetWinningClass(3, 1)" onclick="@(async () => await ClickCell(3, 1))">@cells[6]</button></td>
                <td><button class="@GetWinningClass(3, 2)" onclick="@(async () => await ClickCell(3, 2))">@cells[7]</button></td>
                <td><button class="@GetWinningClass(3, 3)" onclick="@(async () => await ClickCell(3, 3))">@cells[8]</button></td>
            </tr>
        </table>
    </div>
    <p class="credits">Powered by Blazor</p>
</div>


@functions {
    string currentPlayer = "X";
    string[] cells = new string[9];
    int currentGameState = 0;
    string winner = null;
    int[] winnerCombination = new int[3] { -1, -1, -1 };

    string GetWinningClass(int row, int column)
    {
        int cellIndex = ((row - 1) * 3) + (column - 1);
        if (winnerCombination.Contains(cellIndex))
        {
            return "win";
        }
        return string.Empty;
    }

    async Task ClickCell(int row, int column)
    {
        int cellIndex = ((row - 1) * 3) + (column - 1);
        if (cells.Contains(null) && winner == null)
        {
            currentGameState++;
            cells[cellIndex] = currentPlayer;
            currentPlayer = (currentPlayer == "X") ? "O" : "X";

            var gameResponse = await Http.SendJsonAsync<GameResult>(HttpMethod.Post, "api/tic-tac-toe/check-game-status", new { Gameboard = cells } );
            if (gameResponse != null)
            {
                winner = gameResponse.WinnerSign;
                winnerCombination = gameResponse.WinnerCombination;
            }
        }
    }
}
